
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 30 22:45:00 BRT 2014
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import erros.ListaErros;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 30 22:45:00 BRT 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\010\000\002\002\004\000\002\002" +
    "\003\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\002\000\002\003\004\000\002\003\002\000" +
    "\002\005\010\000\002\006\006\000\002\006\003\000\002" +
    "\007\005\000\002\007\002\000\002\010\007\000\002\011" +
    "\004\000\002\011\002\000\002\012\011\000\002\012\011" +
    "\000\002\012\003\000\002\013\003\000\002\013\002\000" +
    "\002\014\004\000\002\014\002\000\002\021\005\000\002" +
    "\022\004\000\002\022\002\000\002\015\004\000\002\016" +
    "\004\000\002\016\002\000\002\017\005\000\002\020\004" +
    "\000\002\020\002\000\002\023\005\000\002\023\010\000" +
    "\002\023\007\000\002\023\007\000\002\023\003\000\002" +
    "\023\003\000\002\047\002\000\002\023\011\000\002\050" +
    "\002\000\002\023\010\000\002\051\002\000\002\023\010" +
    "\000\002\024\004\000\002\024\003\000\002\025\004\000" +
    "\002\025\002\000\002\031\005\000\002\032\004\000\002" +
    "\032\002\000\002\033\004\000\002\033\002\000\002\026" +
    "\005\000\002\037\003\000\002\034\005\000\002\035\003" +
    "\000\002\035\002\000\002\036\005\000\002\036\002\000" +
    "\002\040\004\000\002\041\004\000\002\041\002\000\002" +
    "\042\004\000\002\042\003\000\002\042\005\000\002\042" +
    "\005\000\002\043\003\000\002\043\002\000\002\044\005" +
    "\000\002\044\002\000\002\027\004\000\002\030\005\000" +
    "\002\030\006\000\002\030\002\000\002\046\003\000\002" +
    "\046\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\006\003\005\004\006\001\002\000\004\002" +
    "\241\001\002\000\004\002\uffff\001\002\000\004\015\007" +
    "\001\002\000\014\003\014\005\020\013\017\015\010\034" +
    "\ufffb\001\002\000\006\015\uffe4\032\237\001\002\000\004" +
    "\034\045\001\002\000\014\003\014\005\020\013\017\015" +
    "\010\034\ufffb\001\002\000\014\003\014\005\020\013\017" +
    "\015\010\034\ufffb\001\002\000\016\003\ufff6\005\ufff6\013" +
    "\ufff6\015\ufff6\034\ufff6\035\ufff6\001\002\000\004\015\035" +
    "\001\002\000\014\003\014\005\020\013\017\015\010\034" +
    "\ufffb\001\002\000\004\015\010\001\002\000\004\015\021" +
    "\001\002\000\004\034\022\001\002\000\010\003\014\015" +
    "\010\035\ufff1\001\002\000\010\003\014\015\010\035\ufff1" +
    "\001\002\000\004\035\025\001\002\000\014\003\ufff3\005" +
    "\ufff3\013\ufff3\015\ufff3\034\ufff3\001\002\000\004\035\ufff2" +
    "\001\002\000\004\015\030\001\002\000\004\023\031\001" +
    "\002\000\004\036\032\001\002\000\004\024\033\001\002" +
    "\000\014\003\ufff8\005\ufff8\013\ufff8\015\ufff8\034\ufff8\001" +
    "\002\000\004\034\ufffd\001\002\000\006\024\ufff4\025\037" +
    "\001\002\000\004\024\042\001\002\000\004\015\040\001" +
    "\002\000\006\024\ufff4\025\037\001\002\000\004\024\ufff5" +
    "\001\002\000\016\003\ufff7\005\ufff7\013\ufff7\015\ufff7\034" +
    "\ufff7\035\ufff7\001\002\000\004\034\ufffe\001\002\000\004" +
    "\034\ufffc\001\002\000\012\003\050\012\047\015\010\035" +
    "\ufff9\001\002\000\012\003\050\012\047\015\010\035\ufff9" +
    "\001\002\000\004\015\227\001\002\000\012\003\uffee\012" +
    "\uffee\015\uffee\035\uffee\001\002\000\004\015\054\001\002" +
    "\000\004\035\053\001\002\000\004\002\001\001\002\000" +
    "\004\030\055\001\002\000\006\015\010\031\uffec\001\002" +
    "\000\004\015\223\001\002\000\004\031\uffed\001\002\000" +
    "\004\031\061\001\002\000\010\003\014\015\010\034\uffea" +
    "\001\002\000\010\003\014\015\010\034\uffea\001\002\000" +
    "\004\034\064\001\002\000\020\006\076\010\066\011\071" +
    "\015\067\024\070\034\064\035\uffe1\001\002\000\012\003" +
    "\ufff0\012\ufff0\015\ufff0\035\ufff0\001\002\000\004\030\212" +
    "\001\002\000\036\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\204\027\uffb6\030\uffb6" +
    "\031\uffb6\032\203\033\uffb6\001\002\000\022\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\015\uffdb\024\uffdb\034\uffdb\035\uffdb" +
    "\001\002\000\004\030\172\001\002\000\022\006\uffdc\007" +
    "\uffdc\010\uffdc\011\uffdc\015\uffdc\024\uffdc\034\uffdc\035\uffdc" +
    "\001\002\000\020\006\076\010\066\011\071\015\067\024" +
    "\070\034\064\035\uffe1\001\002\000\006\023\166\030\127" +
    "\001\002\000\004\035\163\001\002\000\004\030\077\001" +
    "\002\000\016\003\100\014\uffc7\015\uffc7\017\101\030\uffc7" +
    "\036\uffc7\001\002\000\004\031\uffda\001\002\000\012\014" +
    "\uffc8\015\uffc8\030\uffc8\036\uffc8\001\002\000\004\031\152" +
    "\001\002\000\012\014\110\015\067\030\113\036\115\001" +
    "\002\000\004\027\106\001\002\000\014\014\uffc7\015\uffc7" +
    "\017\101\030\uffc7\036\uffc7\001\002\000\014\014\uffca\015" +
    "\uffca\017\uffca\030\uffca\036\uffca\001\002\000\004\031\uffcb" +
    "\001\002\000\004\015\145\001\002\000\026\016\uffc2\017" +
    "\uffc2\020\140\021\143\022\137\024\uffc2\025\uffc2\027\uffc2" +
    "\031\uffc2\033\uffc2\001\002\000\030\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\024\uffbc\025\uffbc\027\uffbc\030\127" +
    "\031\uffbc\033\uffbc\001\002\000\014\014\uffc7\015\uffc7\017" +
    "\101\030\uffc7\036\uffc7\001\002\000\020\016\116\017\120" +
    "\024\uffc5\025\uffc5\027\uffc5\031\uffc5\033\uffc5\001\002\000" +
    "\026\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\024\uffc0" +
    "\025\uffc0\027\uffc0\031\uffc0\033\uffc0\001\002\000\012\014" +
    "\uffb5\015\uffb5\030\uffb5\036\uffb5\001\002\000\012\014\110" +
    "\015\067\030\113\036\115\001\002\000\012\014\uffb4\015" +
    "\uffb4\030\uffb4\036\uffb4\001\002\000\014\024\uffc9\025\uffc9" +
    "\027\uffc9\031\uffc9\033\uffc9\001\002\000\020\016\116\017" +
    "\120\024\uffc5\025\uffc5\027\uffc5\031\uffc5\033\uffc5\001\002" +
    "\000\014\024\uffc6\025\uffc6\027\uffc6\031\uffc6\033\uffc6\001" +
    "\002\000\004\031\125\001\002\000\026\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\024\uffbe\025\uffbe\027\uffbe\031" +
    "\uffbe\033\uffbe\001\002\000\026\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\024\uffbd\025\uffbd\027\uffbd\031\uffbd\033" +
    "\uffbd\001\002\000\016\014\uffc7\015\uffc7\017\101\030\uffc7" +
    "\031\uffce\036\uffc7\001\002\000\026\016\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\024\uffc1\025\uffc1\027\uffc1\031\uffc1" +
    "\033\uffc1\001\002\000\006\025\134\031\uffcc\001\002\000" +
    "\004\031\133\001\002\000\026\016\uffd0\017\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\024\uffd0\025\uffd0\027\uffd0\031\uffd0\033" +
    "\uffd0\001\002\000\016\014\uffc7\015\uffc7\017\101\030\uffc7" +
    "\031\uffce\036\uffc7\001\002\000\004\031\uffcf\001\002\000" +
    "\004\031\uffcd\001\002\000\012\014\uffb1\015\uffb1\030\uffb1" +
    "\036\uffb1\001\002\000\012\014\uffb3\015\uffb3\030\uffb3\036" +
    "\uffb3\001\002\000\012\014\110\015\067\030\113\036\115" +
    "\001\002\000\020\016\uffc4\017\uffc4\024\uffc4\025\uffc4\027" +
    "\uffc4\031\uffc4\033\uffc4\001\002\000\012\014\uffb2\015\uffb2" +
    "\030\uffb2\036\uffb2\001\002\000\020\016\uffc3\017\uffc3\024" +
    "\uffc3\025\uffc3\027\uffc3\031\uffc3\033\uffc3\001\002\000\030" +
    "\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\024\uffba\025" +
    "\uffba\027\uffba\031\uffba\032\146\033\uffba\001\002\000\014" +
    "\014\uffc7\015\uffc7\017\101\030\uffc7\036\uffc7\001\002\000" +
    "\026\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\024\uffbf" +
    "\025\uffbf\027\uffbf\031\uffbf\033\uffbf\001\002\000\004\033" +
    "\151\001\002\000\026\016\uffbb\017\uffbb\020\uffbb\021\uffbb" +
    "\022\uffbb\024\uffbb\025\uffbb\027\uffbb\031\uffbb\033\uffbb\001" +
    "\002\000\016\006\076\010\066\011\071\015\067\024\070" +
    "\034\064\001\002\000\022\006\uffd1\007\155\010\uffd1\011" +
    "\uffd1\015\uffd1\024\uffd1\034\uffd1\035\uffd1\001\002\000\022" +
    "\006\uffdf\007\uffdf\010\uffdf\011\uffdf\015\uffdf\024\uffdf\034" +
    "\uffdf\035\uffdf\001\002\000\016\006\076\010\066\011\071" +
    "\015\067\024\070\034\064\001\002\000\022\006\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\015\uffd2\024\uffd2\034\uffd2\035\uffd2" +
    "\001\002\000\004\031\160\001\002\000\016\006\076\010" +
    "\066\011\071\015\067\024\070\034\064\001\002\000\022" +
    "\006\uffd1\007\155\010\uffd1\011\uffd1\015\uffd1\024\uffd1\034" +
    "\uffd1\035\uffd1\001\002\000\022\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\015\uffd9\024\uffd9\034\uffd9\035\uffd9\001\002\000" +
    "\026\003\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\015\uffe3\024\uffe3\034\uffe3\035\uffe3\001\002\000\004\024" +
    "\170\001\002\000\004\024\uffd3\001\002\000\014\014\uffc7" +
    "\015\uffc7\017\101\030\uffc7\036\uffc7\001\002\000\004\024" +
    "\uffd4\001\002\000\022\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\015\uffe0\024\uffe0\034\uffe0\035\uffe0\001\002\000\004\035" +
    "\uffe2\001\002\000\006\003\173\015\067\001\002\000\004" +
    "\031\uffd6\001\002\000\004\031\175\001\002\000\004\024" +
    "\176\001\002\000\022\006\uffdd\007\uffdd\010\uffdd\011\uffdd" +
    "\015\uffdd\024\uffdd\034\uffdd\035\uffdd\001\002\000\004\031" +
    "\200\001\002\000\004\024\201\001\002\000\022\006\uffd5" +
    "\007\uffd5\010\uffd5\011\uffd5\015\uffd5\024\uffd5\034\uffd5\035" +
    "\uffd5\001\002\000\032\016\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\033\uffb9\001\002\000\014\014\uffc7\015\uffc7\017\101" +
    "\030\uffc7\036\uffc7\001\002\000\004\015\205\001\002\000" +
    "\036\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\026\204\027\uffb6\030\uffb6\031\uffb6\032" +
    "\203\033\uffb6\001\002\000\032\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\033\uffb8\001\002\000\004\033\210\001\002" +
    "\000\036\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\026\204\027\uffb6\030\uffb6\031\uffb6" +
    "\032\203\033\uffb6\001\002\000\032\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\033\uffb7\001\002\000\016\003\213\014" +
    "\uffc7\015\uffc7\017\101\030\uffc7\036\uffc7\001\002\000\004" +
    "\031\uffd8\001\002\000\004\031\215\001\002\000\016\006" +
    "\076\010\066\011\071\015\067\024\070\034\064\001\002" +
    "\000\022\006\uffde\007\uffde\010\uffde\011\uffde\015\uffde\024" +
    "\uffde\034\uffde\035\uffde\001\002\000\004\031\220\001\002" +
    "\000\016\006\076\010\066\011\071\015\067\024\070\034" +
    "\064\001\002\000\022\006\uffd7\007\uffd7\010\uffd7\011\uffd7" +
    "\015\uffd7\024\uffd7\034\uffd7\035\uffd7\001\002\000\004\034" +
    "\uffeb\001\002\000\006\025\224\031\uffe7\001\002\000\004" +
    "\015\010\001\002\000\004\031\uffe9\001\002\000\004\031" +
    "\uffe8\001\002\000\004\030\230\001\002\000\006\015\010" +
    "\031\uffec\001\002\000\004\031\232\001\002\000\010\003" +
    "\014\015\010\034\uffea\001\002\000\004\034\064\001\002" +
    "\000\012\003\uffef\012\uffef\015\uffef\035\uffef\001\002\000" +
    "\004\035\ufffa\001\002\000\004\015\uffe6\001\002\000\004" +
    "\033\240\001\002\000\004\015\uffe5\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\010\005\012" +
    "\006\015\010\011\015\014\001\001\000\004\016\235\001" +
    "\001\000\002\001\001\000\014\004\043\005\012\006\015" +
    "\010\011\015\014\001\001\000\014\004\042\005\012\006" +
    "\015\010\011\015\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\033\005\012\006\015\010\011\015" +
    "\014\001\001\000\004\015\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\022\011\023\015\014\001" +
    "\001\000\010\006\022\011\025\015\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\051\012\045\015\050" +
    "\001\001\000\010\003\234\012\045\015\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\057\015\055\021\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\061\014\062\015" +
    "\014\001\001\000\010\006\061\014\221\015\014\001\001" +
    "\000\004\017\064\001\001\000\012\017\071\020\074\023" +
    "\072\027\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\071\020\170\023\072" +
    "\027\073\001\001\000\006\024\163\031\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\101\034\103" +
    "\035\102\001\001\000\004\047\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\027\111\040\113\042\110" +
    "\001\001\000\004\037\104\001\001\000\006\034\106\035" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\141\045\140\001\001\000\006\031" +
    "\125\043\127\001\001\000\006\034\123\035\102\001\001" +
    "\000\006\036\120\046\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\027\111\040\121\042\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\122\046" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\131\034\130\035" +
    "\102\001\001\000\002\001\001\000\004\033\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\032\135\034" +
    "\130\035\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\027\111\040" +
    "\143\042\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\146\001\001\000\006\034" +
    "\147\035\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\071\023\152\027\073\001" +
    "\001\000\004\025\153\001\001\000\002\001\001\000\010" +
    "\017\071\023\155\027\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\071\023\160\027\073\001\001" +
    "\000\004\025\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\166" +
    "\035\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\173\001\001\000\004\051\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\206\035\102\001\001\000" +
    "\002\001\001\000\004\030\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\210\001\001\000\002\001" +
    "\001\000\010\026\213\034\103\035\102\001\001\000\004" +
    "\050\216\001\001\000\002\001\001\000\010\017\071\023" +
    "\215\027\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\071\023\220\027\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\224\001\001\000\006" +
    "\015\055\021\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\230\015\055\021\056" +
    "\001\001\000\002\001\001\000\010\006\061\014\232\015" +
    "\014\001\001\000\004\017\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        defErro(s.left, s.right);
    }

    public void defErro(int linha, int coluna, String texto){
        ((scanner.Scanner) getScanner()).defErro(linha,coluna,texto);
    }

    public void defErro(int linha, int coluna){
        ((scanner.Scanner) getScanner()).defErro(linha,coluna);
    }

    public void defErro(String texto){
        ((scanner.Scanner) getScanner()).defErro(texto);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // mulop ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mulop",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // mulop ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mulop",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // mulop ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mulop",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // addop ::= MENOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addop",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // addop ::= MAIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addop",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // designador2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designador2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // designador2 ::= ABRECOL expr FECHACOL designador2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designador2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // designador2 ::= PONTO IDENT designador2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designador2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // designador ::= IDENT designador2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designador",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // fator3 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator3",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // fator3 ::= ABRECOL expr FECHACOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator3",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // fator2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // fator2 ::= actPars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // fator ::= ABREPAR expr FECHAPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // fator ::= KW_NEW IDENT fator3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // fator ::= INTEIRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // fator ::= designador fator2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // termo2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo2",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // termo2 ::= mulop termo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo2",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // termo ::= fator termo2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr3 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr3 ::= addop termo expr3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr2 ::= MENOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr2 termo expr3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relop ::= OP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicao ::= expr relop expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // actPars3 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actPars3",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // actPars3 ::= VIRG actPars2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actPars3",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // actPars2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actPars2",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // actPars2 ::= expr actPars3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actPars2",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // actPars ::= ABREPAR actPars2 FECHAPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actPars",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement3 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement3",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement3 ::= KW_ELSE statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement3",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement2 ::= actPars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement2",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement2 ::= ATRIB expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement2",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= KW_READ ABREPAR error NT$2 FECHAPAR PTVIRG 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.defErro("erro na leitura do read"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= KW_WHILE ABREPAR error NT$1 FECHAPAR statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$1 ::= 
            {
              Object RESULT =null;
 parser.defErro("erro na estrutura while"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= KW_IF ABREPAR error NT$0 FECHAPAR statement statement3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.defErro("erro na estrutura if"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= PTVIRG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= KW_READ ABREPAR designador FECHAPAR PTVIRG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= KW_WHILE ABREPAR condicao FECHAPAR statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= KW_IF ABREPAR condicao FECHAPAR statement statement3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= designador statement2 PTVIRG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // block2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // block2 ::= statement block2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // block ::= ABRECHAVE block2 FECHACHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo2",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo2 ::= ABRECOL FECHACOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo2",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo ::= IDENT tipo2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formPars2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formPars2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formPars2 ::= VIRG formPars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formPars2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formPars ::= tipo IDENT formPars2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formPars",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // methodDecl3 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDecl3",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // methodDecl3 ::= variavel methodDecl3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDecl3",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // methodDecl2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDecl2",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // methodDecl2 ::= formPars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDecl2",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // methodDecl ::= error 
            {
              Object RESULT =null;
		 parser.defErro("erro na declaracao do metodo"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // methodDecl ::= KW_VOID IDENT ABREPAR methodDecl2 FECHAPAR methodDecl3 block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // methodDecl ::= tipo IDENT ABREPAR methodDecl2 FECHAPAR methodDecl3 block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // classe2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classe2",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // classe2 ::= variavel classe2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classe2",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // classe ::= KW_CLASS IDENT ABRECHAVE classe2 FECHACHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classe",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variavel2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variavel2 ::= VIRG IDENT variavel2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variavel ::= error 
            {
              Object RESULT =null;
		 parser.defErro("erro na declaracao da variavel"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variavel ::= tipo IDENT variavel2 PTVIRG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constante ::= KW_FINAL tipo IDENT ATRIB INTEIRO PTVIRG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // program2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program2",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // program2 ::= methodDecl program2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program2",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracao ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracao ::= classe declaracao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracao ::= variavel declaracao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaracao ::= constante declaracao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error 
            {
              Object RESULT =null;
		 parser.defErro("erro na declaracao do programa"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= KW_PROGRAM IDENT declaracao ABRECHAVE program2 FECHACHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

